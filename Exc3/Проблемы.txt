Задание 3. 

Проблемы:
1) Сервисы core-app и ins-comp-settlement получают данные о доступных продуктах через REST API сервиса ins-product-aggregator, 
    но синхронные запросы могут быть без ответа из-за таймаута, что сожет приветсти к перезапросам и как следствие ненужной нагрузке на сервер.
Существующие синхронные запросы которые нагружают систему.
Поиск в логах ошибок опроса сервисов через монолит затруднено.

Решения проблемы:
Опрос с определенным интервалом времени от сore-app к ins-product-aggregator перенести из монолита в сервис ins-product-survey 

Идея состоит в том что:
1 - перенести механизм запросов из   core-app в ins-product-survey 
2 - В ins-product-survey  добавить базу данных для хранения данных доступных продуктах вшених компаний.
3 -  ins-product-survey  с определенным интервалом времени запрашивает данные со всех сторонних сервисов о доступных продуктах и  результат сохраняет в базу данных
4 - После запроса сервис должен индентифицировать какие продукты добавлены у той или иной компании, после чего отпарвлять в шину соответствующее сообщение
5 - core-app будет подписывать на событие и в обработчике производить сохранение данных в ДБ
6 - ins-comp-settlement подписывать на событие и в обработчике производить сохранение данных в ДБ
7 - Задействовать паттер Transactional outbox на случай масштабировани сервиса агрегатора, чтобы избавиться от повторной отправки в шину, и дублирования записи в БД

2) Сервис ins-comp-settlement раз в сутки осуществляет запрос в core-app по REST API для получения всех оформленных за день страховок, 
   но запрашиваемые данные могут содержать большой объем информации, что потребует выделение ресурсов памяти и процесора для обработки информации
   в core-app ins-comp-settlement сервисах

Решения проблемы:
В монолит core-app добавить событие о создании нового заказа для отправки в шину. а в ins-comp-settlement подписать на данное событие,
так ins-comp-settlement поозволит держать свою БД в актуальном состоянии.

